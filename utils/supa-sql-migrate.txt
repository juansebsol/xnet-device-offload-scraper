-- ======================================================================
-- XNET Device Offload Data Schema - SAFE MIGRATION
-- This script safely creates the device_offload_daily table and related objects
-- Can be run on existing projects without breaking anything
-- ======================================================================

-- Optional: set schema explicitly
set search_path = public;

-----------------------------------------------------------------------
-- Create device_offload_daily table (safe - won't overwrite existing)
-----------------------------------------------------------------------
create table if not exists device_offload_daily (
  id bigserial primary key,
  transaction_date date not null,
  nas_id text not null,
  total_sessions integer not null,
  count_of_users integer not null,
  rejects integer not null,
  total_gbs numeric(20,15) not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Add unique constraint if it doesn't exist
do $$
begin
  if not exists (
    select 1 from pg_constraint 
    where conname = 'device_offload_daily_transaction_date_nas_id_key'
  ) then
    alter table device_offload_daily 
    add constraint device_offload_daily_transaction_date_nas_id_key 
    unique(transaction_date, nas_id);
  end if;
end $$;

-- Add comments if they don't exist
comment on table device_offload_daily is 'Device-specific daily network offload usage scraped from HUB portal.';
comment on column device_offload_daily.transaction_date is 'Calendar date of the transaction (UTC).';
comment on column device_offload_daily.nas_id is 'Network Access Server ID (device identifier).';
comment on column device_offload_daily.total_sessions is 'Total number of sessions for the device on this date.';
comment on column device_offload_daily.count_of_users is 'Number of unique users for the device on this date.';
comment on column device_offload_daily.rejects is 'Number of rejected attempts for the device on this date.';
comment on column device_offload_daily.total_gbs is 'Total gigabytes offloaded for the device on this date.';

-----------------------------------------------------------------------
-- Create indexes (safe - won't overwrite existing)
-----------------------------------------------------------------------
create index if not exists idx_device_offload_date_nas on device_offload_daily(transaction_date, nas_id);
create index if not exists idx_device_offload_nas_date on device_offload_daily(nas_id, transaction_date);
create index if not exists idx_device_offload_date on device_offload_daily(transaction_date);

-----------------------------------------------------------------------
-- Create trigger function (safe - only if doesn't exist)
-----------------------------------------------------------------------
create function if not exists device_offload_daily_touch_updated()
returns trigger
language plpgsql
as $$
begin
  if new.total_sessions is distinct from old.total_sessions or
     new.count_of_users is distinct from old.count_of_users or
     new.rejects is distinct from old.rejects or
     new.total_gbs is distinct from old.total_gbs then
    new.updated_at = now();
  end if;
  return new;
end;
$$;

-----------------------------------------------------------------------
-- Create trigger (safe - only if doesn't exist)
-----------------------------------------------------------------------
do $$
begin
  if not exists (
    select 1 from pg_trigger 
    where tgname = 'trg_device_offload_daily_touch_updated'
  ) then
    create trigger trg_device_offload_daily_touch_updated
    before update on device_offload_daily
    for each row
    execute function device_offload_daily_touch_updated();
  end if;
end $$;

-----------------------------------------------------------------------
-- Create device_offload_scrape_log table (safe - won't overwrite existing)
-----------------------------------------------------------------------
create table if not exists device_offload_scrape_log (
  id bigserial primary key,
  scraped_at timestamptz not null default now(),
  nas_id text not null,
  source_filename text,
  rows_parsed int,
  rows_upserted int,
  rows_changed int,
  success boolean not null default true,
  error_text text
);

-- Add comments if they don't exist
comment on table device_offload_scrape_log is 'Audit trail of device-specific scraper runs.';
comment on column device_offload_scrape_log.nas_id is 'NAS ID that was scraped in this run.';
comment on column device_offload_scrape_log.rows_parsed is 'Number of data lines parsed from export.';
comment on column device_offload_scrape_log.rows_upserted is 'Rows written to device_offload_daily (insert + update).';
comment on column device_offload_scrape_log.rows_changed is 'Rows where values changed on update.';

-----------------------------------------------------------------------
-- Migration complete
-----------------------------------------------------------------------
select 'Device offload schema migration completed successfully!' as status;
