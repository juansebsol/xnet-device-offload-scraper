-- ======================================================================
-- XNET Device Offload Data Schema V2 - SAFE MIGRATION
-- This script creates the new parent/child structure WITHOUT modifying existing data
-- Can be run on existing projects without any risk of data loss
-- ======================================================================

-- Optional: set schema explicitly
set search_path = public;

-----------------------------------------------------------------------
-- Step 1: Create devices table (parent table) - SAFE
-----------------------------------------------------------------------
create table if not exists devices (
  id bigserial primary key,
  nas_id text not null unique,
  device_name text,
  description text,
  is_active boolean not null default true,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Add comments
comment on table devices is 'Master device registry - parent table for device offload data.';
comment on column devices.nas_id is 'Network Access Server ID (unique device identifier).';
comment on column devices.device_name is 'Human-readable device name (optional).';
comment on column devices.description is 'Device description or notes (optional).';
comment on column devices.is_active is 'Whether the device is currently active and being monitored.';

-- Create index on nas_id for fast lookups
create index if not exists idx_devices_nas_id on devices(nas_id);

-- Grant permissions to service role
grant all on table devices to service_role;
grant all on table devices to anon, authenticated;

-----------------------------------------------------------------------
-- Step 2: Create device_offload_daily table (child table) - SAFE
-----------------------------------------------------------------------
create table if not exists device_offload_daily (
  id bigserial primary key,
  transaction_date date not null,
  nas_id text not null,
  device_id bigint,
  total_sessions integer not null,
  count_of_users integer not null,
  rejects integer not null,
  total_gbs numeric(20,15) not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Add foreign key constraint
alter table device_offload_daily 
add constraint device_offload_daily_device_id_fkey 
foreign key (device_id) references devices(id) on delete cascade;

-- Add unique constraint on (transaction_date, device_id) for aggregation
alter table device_offload_daily 
add constraint device_offload_daily_transaction_date_device_id_key 
unique(transaction_date, device_id);

-- Add comments
comment on table device_offload_daily is 'Device-specific daily network offload usage scraped from HUB portal.';
comment on column device_offload_daily.transaction_date is 'Calendar date of the transaction (UTC).';
comment on column device_offload_daily.nas_id is 'Network Access Server ID (device identifier).';
comment on column device_offload_daily.device_id is 'Foreign key reference to devices table.';
comment on column device_offload_daily.total_sessions is 'Total number of sessions for the device on this date.';
comment on column device_offload_daily.count_of_users is 'Number of unique users for the device on this date.';
comment on column device_offload_daily.rejects is 'Number of rejected attempts for the device on this date.';
comment on column device_offload_daily.total_gbs is 'Total gigabytes offloaded for the device on this date.';

-- Grant permissions to service role
grant all on table device_offload_daily to service_role;
grant all on table device_offload_daily to anon, authenticated;

-----------------------------------------------------------------------
-- Step 3: Create device_offload_scrape_log table - SAFE
-----------------------------------------------------------------------
create table if not exists device_offload_scrape_log (
  id bigserial primary key,
  scraped_at timestamptz not null default now(),
  nas_id text not null,
  source_filename text,
  rows_parsed int,
  rows_upserted int,
  rows_changed int,
  success boolean not null default true,
  error_text text
);

-- Add comments
comment on table device_offload_scrape_log is 'Audit trail of device-specific scraper runs.';
comment on column device_offload_scrape_log.nas_id is 'NAS ID that was scraped in this run.';
comment on column device_offload_scrape_log.rows_parsed is 'Number of data lines parsed from export.';
comment on column device_offload_scrape_log.rows_upserted is 'Rows written to device_offload_daily (insert + update).';
comment on column device_offload_scrape_log.rows_changed is 'Rows where values changed on update.';

-- Grant permissions to service role
grant all on table device_offload_scrape_log to service_role;
grant all on table device_offload_scrape_log to anon, authenticated;

-----------------------------------------------------------------------
-- Step 4: Create indexes (SAFE - won't replace existing ones)
-----------------------------------------------------------------------
-- Create optimized indexes for the new structure
create index if not exists idx_device_offload_device_date on device_offload_daily(device_id, transaction_date);
create index if not exists idx_device_offload_date_device on device_offload_daily(transaction_date, device_id);
create index if not exists idx_device_offload_date on device_offload_daily(transaction_date);
create index if not exists idx_device_offload_nas_id on device_offload_daily(nas_id);
create index if not exists idx_device_offload_scrape_log_nas_id on device_offload_scrape_log(nas_id);
create index if not exists idx_device_offload_scrape_log_date on device_offload_scrape_log(scraped_at);

-- Grant permissions on sequences (for auto-increment IDs)
grant usage, select on all sequences in schema public to service_role;
grant usage, select on all sequences in schema public to anon, authenticated;

-----------------------------------------------------------------------
-- Step 5: Create tracked_devices table for daily scraping list
-----------------------------------------------------------------------
create table if not exists tracked_devices (
  id bigserial primary key,
  nas_id text not null unique,
  added_to_tracked_at timestamptz not null default now(),
  last_scraped timestamptz,
  is_active boolean not null default true,
  notes text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Add comments
comment on table tracked_devices is 'Devices that are automatically scraped daily at 2 AM UTC.';
comment on column tracked_devices.nas_id is 'Network Access Server ID (must exist in devices table).';
comment on column tracked_devices.added_to_tracked_at is 'When this device was added to the daily scrape list.';
comment on column tracked_devices.last_scraped is 'Last time this device was scraped (updated after each scrape).';
comment on column tracked_devices.is_active is 'Whether this device is currently being tracked for daily scraping.';
comment on column tracked_devices.notes is 'Optional notes about why this device is tracked.';

-- Create index on nas_id for fast lookups
create index if not exists idx_tracked_devices_nas_id on tracked_devices(nas_id);
create index if not exists idx_tracked_devices_active on tracked_devices(is_active);

-- Grant permissions to service role
grant all on table tracked_devices to service_role;
grant all on table tracked_devices to anon, authenticated;

-- Grant permissions on the sequence for auto-incrementing IDs
grant usage, select on sequence tracked_devices_id_seq to service_role, anon, authenticated;

-- Add foreign key constraint to ensure tracked devices exist in devices table
alter table tracked_devices 
add constraint tracked_devices_nas_id_fkey 
foreign key (nas_id) references devices(nas_id) on delete cascade;

-----------------------------------------------------------------------
-- Step 6: Create device management functions (SAFE)
-----------------------------------------------------------------------
-- Function to get or create device
create or replace function get_or_create_device(p_nas_id text, p_device_name text default null)
returns bigint
language plpgsql
as $$
declare
  v_device_id bigint;
begin
  -- Try to get existing device
  select id into v_device_id from devices where nas_id = p_nas_id;
  
  if v_device_id is null then
    -- Create new device
    insert into devices (nas_id, device_name) 
    values (p_nas_id, p_device_name)
    returning id into v_device_id;
  end if;
  
  return v_device_id;
end;
$$;

-- Function to aggregate daily data
create or replace function aggregate_device_daily_data(
  p_device_id bigint,
  p_transaction_date date
)
returns table(
  total_sessions bigint,
  count_of_users bigint,
  rejects bigint,
  total_gbs numeric
)
language sql
as $$
  select 
    sum(total_sessions)::bigint as total_sessions,
    sum(count_of_users)::bigint as count_of_users,
    sum(rejects)::bigint as rejects,
    sum(total_gbs) as total_gbs
  from device_offload_daily 
  where device_id = p_device_id 
    and transaction_date = p_transaction_date;
$$;

-- Function to add device to tracked list
create or replace function add_device_to_tracked(p_nas_id text, p_notes text default null)
returns text
language plpgsql
as $$
begin
  -- First ensure device exists in devices table
  if not exists (select 1 from devices where nas_id = p_nas_id) then
    raise exception 'Device % does not exist in devices table', p_nas_id;
  end if;
  
  -- Add to tracked devices if not already there
  insert into tracked_devices (nas_id, notes)
  values (p_nas_id, p_notes)
  on conflict (nas_id) do update set
    is_active = true,
    notes = coalesce(p_notes, tracked_devices.notes),
    updated_at = now();
  
  return 'Device ' || p_nas_id || ' added to tracked list successfully';
end;
$$;

-- Function to remove device from tracked list
create or replace function remove_device_from_tracked(p_nas_id text)
returns text
language plpgsql
as $$
begin
  -- Remove from tracked devices (but keep in devices table)
  delete from tracked_devices where nas_id = p_nas_id;
  
  if found then
    return 'Device ' || p_nas_id || ' removed from tracked list successfully';
  else
    return 'Device ' || p_nas_id || ' was not in tracked list';
  end if;
end;
$$;

-----------------------------------------------------------------------
-- Migration complete - FRESH START
-----------------------------------------------------------------------
select 'Device offload V2 schema migration completed successfully!' as status;
select 'Created devices table (parent) and device_offload_daily table (child)' as details;
select 'Created device_offload_scrape_log table for audit trail' as details;
select 'Created tracked_devices table for daily scraping list' as details;
select 'All tables created with proper parent/child relationships' as structure;
select 'Ready for first scrape with new V2 structure!' as next_step;
